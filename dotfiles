#!/usr/bin/env bash

COMMAND="satisfy"
FULLHOST=$(hostname -f)
DOTFILEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Check if bork repo exists
if [[ ! -d "${DOTFILEDIR}/bork/.git" ]]; then
    echo "missing: bork"
    git clone https://github.com/frdmn/bork.git ${DOTFILEDIR}/bork >/dev/null && echo "ok: bork" || echo "error: bork"
else
    # Check if bork is up to date
    REMOTEHEAD=$(git --git-dir=${DOTFILEDIR}/bork/.git --work-tree=${DOTFILEDIR}/bork ls-remote origin -h refs/heads/master | awk '{ print $1 }')
    LOCALHEAD=$(git --git-dir=${DOTFILEDIR}/bork/.git --work-tree=${DOTFILEDIR}/bork rev-parse HEAD)
    if [[ $REMOTEHEAD == $LOCALHEAD ]]; then
        echo "ok: bork"
    else
        echo "outdated: bork"
        git --git-dir=${DOTFILEDIR}/bork/.git --work-tree=${DOTFILEDIR}/bork pull
        echo "ok: bork"
    fi
fi

# Make sure dotfile repo is up to date
git --git-dir=${DOTFILEDIR}/bork/.git pull >/dev/null && echo "ok: dotfiles" || echo "error: dotfiles"

# Check arguments
if [[ -z ${1} ]]; then
    # If no 2nd argument => use bootstrap borkfile
    ${DOTFILEDIR}/bork/bin/bork ${COMMAND} borkfiles/_.bork

    # Host specific
    if [ "$(ls ${DOTFILEDIR}/hostnames/${FULLHOST}/borkfiles 2> /dev/null)" ]; then
      # Change into the host specific borkfile folder. Hack to avoid bork appending the fullpath a second time
      echo "info: found host-specific bork files for \"${FULLHOST}\""
      cd ${DOTFILEDIR}/hostnames/${FULLHOST}/borkfiles
      for file in *; do
        # Execute without location paths
        ${DOTFILEDIR}/bork/bin/bork ${COMMAND} "${file}"
      done
      # Change back into previous directory
      cd - >/dev/null
    fi
else
    # Otherwise, install use the specific borkfile(s)
    BORKFILES=${@:1}
    # For each specified borkfile
    for BORK in ${BORKFILES}; do
        if [[ -f borkfiles/${BORK}.bork ]]; then
            # Expand to actual path of borkfile, append to $BORKFILESTRING
            BORKFILESTRING+=" borkfiles/${BORK}.bork"
        # If host specific, use that one instead
        elif [[ -f ${DOTFILEDIR}/hostnames/${FULLHOST}/borkfiles/${BORK}.bork ]]; then
            # Expand to actual path of borkfile, append to $BORKFILESTRING
            echo "info: found host-specific bork files for \"${FULLHOST}\""
            BORKFILESTRING+=" hostnames/${FULLHOST}/borkfiles/${BORK}.bork"
        else
            echo "Error: couldn't find borkfile \"${BORK}.bork\" :("
        fi
    done
    # Check if we have found at least one valid borkfile
    if [[ ! -z ${BORKFILESTRING} ]]; then
        # Execute $BORKFILESTRING
        ${DOTFILEDIR}/bork/bin/bork ${COMMAND} ${BORKFILESTRING}
    fi
fi
